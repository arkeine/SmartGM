package ch.arkeine.smartgm.model;

import java.util.List;

import ch.arkeine.smartgm.model.handler.IdentifiedDataObject;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TABLE".
 */
public class Table implements IdentifiedDataObject {

    private Long id;
    private java.util.Date name;
    private String description;
    private Long fk_universe_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableDao myDao;

    private Universe universe;
    private Long universe__resolvedKey;

    private List<Tableitem> tableitems;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Table() {
    }

    public Table(Long id) {
        this.id = id;
    }

    public Table(Long id, java.util.Date name, String description, Long fk_universe_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.fk_universe_id = fk_universe_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getName() {
        return name;
    }

    public void setName(java.util.Date name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getFk_universe_id() {
        return fk_universe_id;
    }

    public void setFk_universe_id(Long fk_universe_id) {
        this.fk_universe_id = fk_universe_id;
    }

    /** To-one relationship, resolved on first access. */
    public Universe getUniverse() {
        Long __key = this.fk_universe_id;
        if (universe__resolvedKey == null || !universe__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UniverseDao targetDao = daoSession.getUniverseDao();
            Universe universeNew = targetDao.load(__key);
            synchronized (this) {
                universe = universeNew;
            	universe__resolvedKey = __key;
            }
        }
        return universe;
    }

    public void setUniverse(Universe universe) {
        synchronized (this) {
            this.universe = universe;
            fk_universe_id = universe == null ? null : universe.getId();
            universe__resolvedKey = fk_universe_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Tableitem> getTableitems() {
        if (tableitems == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableitemDao targetDao = daoSession.getTableitemDao();
            List<Tableitem> tableitemsNew = targetDao._queryTable_Tableitems(id);
            synchronized (this) {
                if(tableitems == null) {
                    tableitems = tableitemsNew;
                }
            }
        }
        return tableitems;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTableitems() {
        tableitems = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public long getUniqueId() {
        return getId();
    }

    @Override
    public Class getDataType() {
        return this.getClass();
    }
    // KEEP METHODS END

}
