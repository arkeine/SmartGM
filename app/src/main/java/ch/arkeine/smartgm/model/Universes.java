package ch.arkeine.smartgm.model;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "UNIVERSES".
 */
public class Universes {

    private Long id;
    private String name;
    private String description;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UniversesDao myDao;

    private List<Games> games;
    private List<Wikis> wikis;
    private List<Tables> tables;
    private List<Dices> dices;

    public Universes() {
    }

    public Universes(Long id) {
        this.id = id;
    }

    public Universes(Long id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUniversesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Games> getGames() {
        if (games == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GamesDao targetDao = daoSession.getGamesDao();
            List<Games> gamesNew = targetDao._queryUniverses_Games(id);
            synchronized (this) {
                if(games == null) {
                    games = gamesNew;
                }
            }
        }
        return games;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGames() {
        games = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Wikis> getWikis() {
        if (wikis == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WikisDao targetDao = daoSession.getWikisDao();
            List<Wikis> wikisNew = targetDao._queryUniverses_Wikis(id);
            synchronized (this) {
                if(wikis == null) {
                    wikis = wikisNew;
                }
            }
        }
        return wikis;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWikis() {
        wikis = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Tables> getTables() {
        if (tables == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TablesDao targetDao = daoSession.getTablesDao();
            List<Tables> tablesNew = targetDao._queryUniverses_Tables(id);
            synchronized (this) {
                if(tables == null) {
                    tables = tablesNew;
                }
            }
        }
        return tables;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTables() {
        tables = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Dices> getDices() {
        if (dices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DicesDao targetDao = daoSession.getDicesDao();
            List<Dices> dicesNew = targetDao._queryUniverses_Dices(id);
            synchronized (this) {
                if(dices == null) {
                    dices = dicesNew;
                }
            }
        }
        return dices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDices() {
        dices = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
