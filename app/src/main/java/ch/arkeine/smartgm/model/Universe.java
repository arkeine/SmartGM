package ch.arkeine.smartgm.model;

import java.util.List;

import ch.arkeine.smartgm.model.handler.IdentifiedDataObject;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "UNIVERSE".
 */
public class Universe implements IdentifiedDataObject {

    private Long id;
    private String name;
    private String description;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UniverseDao myDao;

    private List<Game> games;
    private List<Wiki> wikis;
    private List<Table> tables;
    private List<Dice> dices;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Universe() {
    }

    public Universe(Long id) {
        this.id = id;
    }

    public Universe(Long id, String name, String description) {
        this.id = id;
        this.name = name;
        this.description = description;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUniverseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Game> getGames() {
        if (games == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GameDao targetDao = daoSession.getGameDao();
            List<Game> gamesNew = targetDao._queryUniverse_Games(id);
            synchronized (this) {
                if(games == null) {
                    games = gamesNew;
                }
            }
        }
        return games;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGames() {
        games = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Wiki> getWikis() {
        if (wikis == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WikiDao targetDao = daoSession.getWikiDao();
            List<Wiki> wikisNew = targetDao._queryUniverse_Wikis(id);
            synchronized (this) {
                if(wikis == null) {
                    wikis = wikisNew;
                }
            }
        }
        return wikis;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetWikis() {
        wikis = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Table> getTables() {
        if (tables == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TableDao targetDao = daoSession.getTableDao();
            List<Table> tablesNew = targetDao._queryUniverse_Tables(id);
            synchronized (this) {
                if(tables == null) {
                    tables = tablesNew;
                }
            }
        }
        return tables;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTables() {
        tables = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Dice> getDices() {
        if (dices == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DiceDao targetDao = daoSession.getDiceDao();
            List<Dice> dicesNew = targetDao._queryUniverse_Dices(id);
            synchronized (this) {
                if(dices == null) {
                    dices = dicesNew;
                }
            }
        }
        return dices;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDices() {
        dices = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public long getUniqueId() {
        return getId();
    }

    @Override
    public Class getDataType() {
        return this.getClass();
    }
    // KEEP METHODS END

}
