package ch.arkeine.smartgm.model;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "WIKI".
 */
public class Wiki {

    private Long id;
    private String name;
    private String description;
    private Long fk_universe_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WikiDao myDao;

    private Universe universe;
    private Long universe__resolvedKey;


    public Wiki() {
    }

    public Wiki(Long id) {
        this.id = id;
    }

    public Wiki(Long id, String name, String description, Long fk_universe_id) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.fk_universe_id = fk_universe_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWikiDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getFk_universe_id() {
        return fk_universe_id;
    }

    public void setFk_universe_id(Long fk_universe_id) {
        this.fk_universe_id = fk_universe_id;
    }

    /** To-one relationship, resolved on first access. */
    public Universe getUniverse() {
        Long __key = this.fk_universe_id;
        if (universe__resolvedKey == null || !universe__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UniverseDao targetDao = daoSession.getUniverseDao();
            Universe universeNew = targetDao.load(__key);
            synchronized (this) {
                universe = universeNew;
            	universe__resolvedKey = __key;
            }
        }
        return universe;
    }

    public void setUniverse(Universe universe) {
        synchronized (this) {
            this.universe = universe;
            fk_universe_id = universe == null ? null : universe.getId();
            universe__resolvedKey = fk_universe_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
