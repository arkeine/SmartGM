package ch.arkeine.smartgm.model;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "TIMELINES".
 */
public class Timelines {

    private Long id;
    private java.util.Date date;
    private String description;
    private Long fk_game_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TimelinesDao myDao;

    private Games games;
    private Long games__resolvedKey;


    public Timelines() {
    }

    public Timelines(Long id) {
        this.id = id;
    }

    public Timelines(Long id, java.util.Date date, String description, Long fk_game_id) {
        this.id = id;
        this.date = date;
        this.description = description;
        this.fk_game_id = fk_game_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTimelinesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Long getFk_game_id() {
        return fk_game_id;
    }

    public void setFk_game_id(Long fk_game_id) {
        this.fk_game_id = fk_game_id;
    }

    /** To-one relationship, resolved on first access. */
    public Games getGames() {
        Long __key = this.fk_game_id;
        if (games__resolvedKey == null || !games__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GamesDao targetDao = daoSession.getGamesDao();
            Games gamesNew = targetDao.load(__key);
            synchronized (this) {
                games = gamesNew;
            	games__resolvedKey = __key;
            }
        }
        return games;
    }

    public void setGames(Games games) {
        synchronized (this) {
            this.games = games;
            fk_game_id = games == null ? null : games.getId();
            games__resolvedKey = fk_game_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
